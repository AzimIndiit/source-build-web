import{n as a,a3 as c,E as d,aK as u,G as y}from"./index-CUSVstqU.js";class i{async getQuotes(e){const t=new URLSearchParams;return e&&Object.entries(e).forEach(([p,n])=>{n!=null&&n!==""&&t.append(p,String(n))}),(await a.get("/quotes",{params:t})).data}async getQuoteById(e){return(await a.get(`/quotes/${e}`)).data}async createQuote(e){return(await a.post("/quotes",e)).data}async updateQuote(e,t){return(await a.patch(`/quotes/${e}`,t)).data}async deleteQuote(e){return(await a.delete(`/quotes/${e}`)).data}async updateQuoteStatus(e,t){return(await a.patch(`/quotes/${e}/status`,{status:t})).data}async respondToQuote(e,t){return(await a.patch(`/quotes/${e}/respond`,t)).data}async getQuoteStats(e){const t=e?{period:e}:{};return(await a.get("/quotes/stats",{params:t})).data}}const r=new i,q=s=>c({queryKey:["quotes",s],queryFn:()=>r.getQuotes(s),staleTime:300*1e3}),l=(s,e=!0)=>c({queryKey:["quote",s],queryFn:()=>r.getQuoteById(s),enabled:e&&!!s,staleTime:300*1e3}),g=()=>d({mutationFn:s=>r.deleteQuote(s),onSuccess:()=>{u.success("Quote deleted successfully"),y.invalidateQueries({queryKey:["quotes"]})},onError:s=>{u.error(s?.response?.data?.message||"Failed to delete quote")}});export{q as a,g as b,l as u};
