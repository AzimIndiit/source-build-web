const t={MAX_FILE_SIZE:5242880,MIN_WIDTH:400,MIN_HEIGHT:400},d=async e=>e.type.startsWith("image/")?e.size>t.MAX_FILE_SIZE?{valid:!1,error:`Selected image is ${(e.size/1048576).toFixed(1)}MB. Maximum size is 5MB allowed`}:new Promise(a=>{const i=new Image,r=URL.createObjectURL(e);i.onload=()=>{URL.revokeObjectURL(r),i.width<t.MIN_WIDTH||i.height<t.MIN_HEIGHT?a({valid:!1,error:`Image is ${i.width}x${i.height}px. Minimum size required is ${t.MIN_WIDTH}x${t.MIN_HEIGHT}px`}):a({valid:!0})},i.onerror=()=>{URL.revokeObjectURL(r),a({valid:!1,error:`Failed to load image "${e.name}"`})},i.src=r}):{valid:!1,error:`"${e.name}" is not an image file`},I=async(e,a,i=0)=>{const r=a-i,n=[],s=[];if(i>=a)return s.push(`Maximum ${a} images allowed`),{validFiles:n,errors:s};for(let o=0;o<Math.min(e.length,r);o++){const l=await d(e[o]);l.valid?n.push(e[o]):l.error&&s.push(l.error)}return e.length>r&&s.push(`Only ${r} more image(s) can be added (max ${a} total)`),{validFiles:n,errors:s}};export{d as a,I as v};
