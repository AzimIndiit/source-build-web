---
alwaysApply: true
---
# ðŸš€ Project Rules â€“ Source Build

## ðŸ”§ Tech Stack
- React 19 (Vite)
- TypeScript
- TailwindCSS v4
- Shadcn/UI (Radix-based components)
- Tanstack Query (React Query)
- Axios (with interceptors & JWT support)
- React Router v7
- React Hook Form + Zod (validation)
- Framer Motion (animations)
- ESLint + Prettier (formatting)
- Vitest + React Testing Library (unit tests)
- Cypress/Playwright (E2E tests)

---

## ðŸ“‚ Project Structure

src/
â”‚â”€â”€ app/ # Core app setup
â”‚ â”œâ”€â”€ providers/ # Context providers (query, theme, auth)
â”‚ â”œâ”€â”€ routes/ # Routing definitions + guards
â”‚ â”œâ”€â”€ layouts/ # Shared layouts (auth, dashboard, public)
â”‚ â””â”€â”€ App.tsx
â”‚
â”‚â”€â”€ components/ # Shared UI
â”‚ â”œâ”€â”€ ui/ # Shadcn components
â”‚ â”œâ”€â”€ forms/ # Form elements
â”‚ â”œâ”€â”€ navigation/ # Navbars, sidebars
â”‚ â”œâ”€â”€ charts/ # Charts & graphs
â”‚ â””â”€â”€ feedback/ # Spinners, toasts, loaders
â”‚
â”‚â”€â”€ features/ # Feature-based modules
â”‚ â”œâ”€â”€ auth/ # Login, signup, OTP, reset
â”‚ â”œâ”€â”€ user/ # Profile, settings, bank accounts
â”‚ â”œâ”€â”€ dashboard/ # Role dashboards (driver, seller)
â”‚ â”œâ”€â”€ vehicle/ # Vehicle management (driver)
â”‚ â”œâ”€â”€ orders/ # Orders & details
â”‚ â”œâ”€â”€ products/ # Product listings (seller)
â”‚ â”œâ”€â”€ reviews/ # Ratings & reviews
â”‚ â”œâ”€â”€ notifications/ # Notifications center
â”‚ â””â”€â”€ messages/ # Messaging/chat
â”‚
â”‚â”€â”€ hooks/ # Custom React hooks
â”‚â”€â”€ lib/ # API + utils
â”‚ â”œâ”€â”€ api/ # API grouped by feature
â”‚ â”œâ”€â”€ axios.ts # Axios instance + interceptors
â”‚ â”œâ”€â”€ queryClient.ts # React Query client
â”‚ â””â”€â”€ helpers.ts
â”‚
â”‚â”€â”€ styles/ # Tailwind + global styles
â”‚â”€â”€ types/ # TypeScript models
â”‚â”€â”€ tests/ # Unit & integration tests
â”‚â”€â”€ mocks/ # Mock API/data


---

## ðŸ“Œ Rules & Best Practices

### General
- **TypeScript only** (no JS files).
- Use **absolute imports** (`@/components`, `@/features`, etc.).
- Stick to **feature-based foldering** (group by domain, not layer).
- Always prefer **composition > inheritance** in React.

### API & Data
- All API requests go through `lib/axios.ts`.
- Use **React Query hooks per feature** (`useOrders`, `useAuth`).
- JWT handling via **Axios interceptor** (auto-refresh if needed).
- Do not call `axios` directly inside components.

### Components & Styling
- Use **Shadcn components** + Tailwind classes for UI.
- Create **variants** for components via `class-variance-authority`.
- Keep components **small & reusable**.
- No inline styles (only Tailwind or utility functions).

### Forms
- Use **React Hook Form + Zod** for form validation.
- Define schemas close to their feature (e.g., `features/auth/schema.ts`).

### Routing & Guards
- Use **React Router v7**.
- Protect routes with `ProtectedRoute`.
- Role-based layouts â†’  
  - `DriverLayout` for drivers  
  - `SellerLayout` for sellers  

### State Management
- Use **React Query for server state**.
- Use **Zustand** (if needed) for client state.
- No Redux unless absolutely required.

### Testing & Quality
- Pre-commit hooks with Husky + Lint-Staged.
- Unit test **hooks and components**.
- Write E2E tests for **critical flows** (login â†’ order â†’ checkout).

---

âœ… Follow these rules for **consistent, scalable, enterprise-grade code**.
